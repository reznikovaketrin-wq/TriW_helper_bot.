import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –§–∞–π–ª–∏ –±–∞–∑–∏ ---
USERS_FILE = "database/users.json"
SECTIONS_FILE = "database/sections.json"
TASKS_FILE = "database/tasks.json"

# --- –†–æ–ª—ñ ---
ROLES = [
    "üëí –¢—å–æ—Ç—è –†–æ–∑—Ä–æ–±–Ω–∏–∫",
    "üßº –ö–ª—ñ–Ω",
    "‚úçÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥",
    "üñã –†–µ–¥",
    "üß© –¢–∞–π–ø",
    "üëÅ –ë–µ—Ç–∞"
]

# --- –ü–æ—Ä—è–¥–æ–∫ –µ—Ç–∞–ø—ñ–≤ ---
ROLE_ORDER = ["‚úçÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥", "üßº –ö–ª—ñ–Ω", "üñã –†–µ–¥", "üß© –¢–∞–π–ø", "üëÅ –ë–µ—Ç–∞"]

# ---------- –†–æ–±–æ—Ç–∞ –∑ –±–∞–∑–∞–º–∏ ----------
def load_data(file):
    if not os.path.exists(file):
        return {}
    with open(file, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_data(file, data):
    os.makedirs(os.path.dirname(file), exist_ok=True)
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_users(): return load_data(USERS_FILE)
def save_users(data): save_data(USERS_FILE, data)
def load_sections(): return load_data(SECTIONS_FILE)
def save_sections(data): save_data(SECTIONS_FILE, data)
def load_tasks(): return load_data(TASKS_FILE)
def save_tasks(data): save_data(TASKS_FILE, data)

# ---------- –ú–µ–Ω—é ----------
def build_main_menu(roles: list) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")],
        [KeyboardButton(text="üé≠ –ú–æ—ó —Ä–æ–ª—ñ")]
    ]
    if "üëí –¢—å–æ—Ç—è –†–æ–∑—Ä–æ–±–Ω–∏–∫" in roles:
        buttons.append([KeyboardButton(text="‚ûï –ü–∞–Ω–µ–ª—å –¢—å–æ—Ç—ñ –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def build_roles_keyboard() -> ReplyKeyboardMarkup:
    role_btns = [KeyboardButton(text=r) for r in ROLES]
    grid = [role_btns[i:i+2] for i in range(0, len(role_btns), 2)]
    grid.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")])
    return ReplyKeyboardMarkup(keyboard=grid, resize_keyboard=True)

def build_admin_panel() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üÜï –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- –°—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ ---
admin_states = {}

# ---------- /start ----------
@dp.message(Command("start"))
async def start_command(message: Message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in users:
        users[user_id] = {"roles": [], "tasks": []}
        save_users(users)

    roles = users[user_id].get("roles", [])
    if roles:
        menu = build_main_menu(roles)
        await message.answer(f"–í—ñ—Ç–∞—é –∑–Ω–æ–≤—É! üëã\n–¢–≤–æ—ó —Ä–æ–ª—ñ: {', '.join(roles)}", reply_markup=menu)
    else:
        kb = build_roles_keyboard()
        await message.answer("–•—Ç–æ —Ç–∏? üëÄ\n(–ú–æ–∂–µ—à –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–æ–ª–µ–π, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ)", reply_markup=kb)

# ---------- –ü–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–ª–µ–π ----------
@dp.message(F.text == "üé≠ –ú–æ—ó —Ä–æ–ª—ñ")
async def show_roles(message: Message):
    users = load_users()
    user_id = str(message.from_user.id)
    roles = users.get(user_id, {}).get("roles", [])
    if not roles:
        await message.answer("–ü–æ–∫–∏ —â–æ —Ä–æ–ª–µ–π –Ω–µ–º–∞—î. –û–±–µ—Ä–∏ –Ω–∏–∂—á–µ —Ç–∞ –¥–æ–¥–∞–π üòâ")
    else:
        await message.answer(f"–¢–≤–æ—ó —Ä–æ–ª—ñ: {', '.join(roles)}")

# ---------- –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–¥–∞—á ----------
@dp.message(F.text == "üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")
async def show_tasks(message: Message):
    users = load_users()
    user_id = str(message.from_user.id)
    user_roles = users.get(user_id, {}).get("roles", [])
    tasks = load_tasks()

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–¥–∞—á—ñ
    my_tasks = [t for t in tasks.values() if t["role"] in user_roles and t["status"] == "–≤ —Ä–æ–±–æ—Ç—ñ"]

    if not my_tasks:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –≤ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á üòä", reply_markup=kb)
        return

    # –≥—Ä—É–ø—É—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ —Ç–∞–π—Ç–ª–æ–º
    grouped = {}
    for t in my_tasks:
       grouped.setdefault((t["title"], t["role"]), []).append(t)


    text = "üìã *–¢–≤–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ:*\n\n"

    for title, items in grouped.items():
        # –∑–±–∏—Ä–∞—î–º–æ –≥–ª–∞–≤–∏
        chapters = ", ".join(sorted([t["chapter"] for t in items]))
        roles = ", ".join(sorted({t["role"] for t in items}))
        text += f"{roles} ‚Äî *{title}*, –≥–ª–∞–≤–∏ {chapters}\n\n"

    await message.answer(text.strip(), parse_mode="Markdown", reply_markup=kb)



# ---------- –ü–∞–Ω–µ–ª—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ ----------
@dp.message(F.text == "‚ûï –ü–∞–Ω–µ–ª—å –¢—å–æ—Ç—ñ –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞")
async def open_admin_panel(message: Message):
    users = load_users()
    user_id = str(message.from_user.id)
    roles = users.get(user_id, {}).get("roles", [])
    if "üëí –¢—å–æ—Ç—è –†–æ–∑—Ä–æ–±–Ω–∏–∫" not in roles:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ üõë")
        return
    admin_menu = build_admin_panel()
    await message.answer("üëí –ü–∞–Ω–µ–ª—å –¢—å–æ—Ç—ñ –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=admin_menu)

# --- –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª ---
def build_manhwa_keyboard(sections):
    buttons = [[KeyboardButton(text=title)] for title in sections.keys()]
    buttons.append([KeyboardButton(text="‚ûï –ù–æ–≤–∞ –º–∞–Ω—Ö–≤–∞")])
    buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(F.text == "üÜï –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª")
async def choose_manhwa(message: Message):
    user_id = str(message.from_user.id)
    sections = load_sections()
    admin_states[user_id] = {"step": "choose_title"}
    keyboard = build_manhwa_keyboard(sections)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–∞–Ω—Ö–≤—É –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É:", reply_markup=keyboard)

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –º–∞–Ω—Ö–≤–∏ ---
@dp.message(F.text == "‚ûï –ù–æ–≤–∞ –º–∞–Ω—Ö–≤–∞")
async def start_new_manhwa(message: Message):
    user_id = str(message.from_user.id)
    admin_states[user_id] = {"step": "new_title"}
    await message.answer("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –º–∞–Ω—Ö–≤–∏ üìñ")

@dp.message(lambda m: str(m.from_user.id) in admin_states and admin_states[str(m.from_user.id)]["step"] == "new_title")
async def new_manhwa_title(message: Message):
    user_id = str(message.from_user.id)
    admin_states[user_id]["title"] = message.text
    admin_states[user_id]["step"] = "chapters"
    await message.answer("–¢–µ–ø–µ—Ä –Ω–æ–º–µ—Ä(–∏) –≥–ª–∞–≤ üî¢ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1,2,3)")

# --- –í–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–æ—ó –º–∞–Ω—Ö–≤–∏ ---
@dp.message(lambda m: str(m.from_user.id) in admin_states and admin_states[str(m.from_user.id)]["step"] == "choose_title")
async def existing_manhwa(message: Message):
    user_id = str(message.from_user.id)
    title = message.text.strip()
    admin_states[user_id] = {"step": "chapters", "title": title}
    await message.answer(f"–î–æ–¥–∞—Ç–∏ –≥–ª–∞–≤–∏ –¥–ª—è *{title}* üî¢ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12,13,14)", parse_mode="Markdown")

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥–ª–∞–≤ ---
@dp.message(lambda m: str(m.from_user.id) in admin_states and admin_states[str(m.from_user.id)]["step"] == "chapters")
async def add_chapters(message: Message):
    user_id = str(message.from_user.id)
    title = admin_states[user_id]["title"]

    # üî¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –≥–ª–∞–≤ (01-10, 5-12, 7,9 —ñ —Ç.–¥.)
    raw_input = message.text.replace(" ", "")
    parsed = []
    for part in raw_input.split(","):
        if "-" in part:
            start, end = part.split("-")
            try:
                start_i = int(start)
                end_i = int(end)
                # ‚úÖ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ‚Äî –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
                width = max(2, len(start))
                parsed.extend([str(i).zfill(width) for i in range(start_i, end_i + 1)])
            except ValueError:
                continue
        elif part:
            # ‚úÖ —Ç–æ–∂–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 2 —Å–∏–º–≤–æ–ª–æ–≤
            try:
                parsed.append(str(int(part)).zfill(2))
            except ValueError:
                continue

    new_chapters = parsed

    sections = load_sections()
    if title not in sections:
        sections[title] = []

    existing = set(sections[title])
    duplicates = [ch for ch in new_chapters if ch in existing]
    unique_new = [ch for ch in new_chapters if ch not in existing]

    if not unique_new:
        await message.answer(
            f"‚ÑπÔ∏è –£—Å—ñ –≤–≤–µ–¥–µ–Ω—ñ –≥–ª–∞–≤–∏ –≤–∂–µ —î —É *{title}*.",
            parse_mode="Markdown"
        )
        return

    sections[title].extend(unique_new)
    save_sections(sections)

    admin_states[user_id]["step"] = "start_stage"
    admin_states[user_id]["chapters"] = unique_new

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üî∞ –ó –Ω—É–ª—è"), KeyboardButton(text="üîÅ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è")]],
        resize_keyboard=True
    )

    msg = f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ *{title}*: –≥–ª–∞–≤–∏ {', '.join(unique_new)}"
    if duplicates:
        msg += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∏): {', '.join(duplicates)}"
    msg += "\n\n–ó–≤—ñ–¥–∫–∏ –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–±–æ—Ç—É?"

    await message.answer(msg, parse_mode="Markdown", reply_markup=keyboard)


# --- –í–∏–±—ñ—Ä —Ç–∏–ø—É —Å—Ç–∞—Ä—Ç—É ---
@dp.message(lambda m: str(m.from_user.id) in admin_states and admin_states[str(m.from_user.id)]["step"] == "start_stage")
async def choose_start_type(message: Message):
    user_id = str(message.from_user.id)
    if message.text == "üî∞ –ó –Ω—É–ª—è":
        start_index = 0
    elif message.text == "üîÅ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è":
        admin_states[user_id]["step"] = "choose_role_start"
        kb = [[KeyboardButton(text=r)] for r in ROLE_ORDER]
        await message.answer("–ó —è–∫–æ–≥–æ –µ—Ç–∞–ø—É –ø–æ—á–∏–Ω–∞—î–º–æ?", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
        return
    else:
        return

    title = admin_states[user_id]["title"]
    chapters = admin_states[user_id]["chapters"]
    create_tasks(title, chapters, start_index)

    await finish_task_creation(message, title, chapters)

# --- –í–∏–±—ñ—Ä —Ä–æ–ª—ñ –ø–æ—á–∞—Ç–∫—É –ø—Ä–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—ñ ---
@dp.message(lambda m: str(m.from_user.id) in admin_states and admin_states[str(m.from_user.id)]["step"] == "choose_role_start")
async def choose_role_start(message: Message):
    user_id = str(message.from_user.id)
    if message.text not in ROLE_ORDER:
        return
    start_index = ROLE_ORDER.index(message.text)
    title = admin_states[user_id]["title"]
    chapters = admin_states[user_id]["chapters"]
    create_tasks(title, chapters, start_index)
    await finish_task_creation(message, title, chapters)

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–¥–∞—á (–ü–µ—Ä–µ–∫–ª–∞–¥ + –ö–ª—ñ–Ω) ===
def create_tasks(title, chapters, start_index=0):
    """
    –°—Ç–≤–æ—Ä—é—î –∑–∞–¥–∞—á—ñ –¥–ª—è –ø–µ—Ä—à–æ—ó —Ä–æ–ª—ñ ROLE_ORDER[start_index].
    –Ø–∫—â–æ —Ü–µ –ü–µ—Ä–µ–∫–ª–∞–¥ ‚Äî –æ–¥—Ä–∞–∑—É —Å—Ç–≤–æ—Ä—é—î —ñ –ö–ª—ñ–Ω –¥–ª—è —Ç–∏—Ö —Å–∞–º–∏—Ö –≥–ª–∞–≤.
    –î–∞–ª—ñ –µ—Ç–∞–ø–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–†–µ–¥, –¢–∞–π–ø, –ë–µ—Ç–∞).
    """
    tasks = load_tasks()
    next_id = max([int(k) for k in tasks.keys()] + [0]) + 1

    first_role = ROLE_ORDER[start_index]  # –ù–∞–ø—Ä. "‚úçÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥" –∞–±–æ "üßº –ö–ª—ñ–Ω"

    for ch in chapters:
        # –ó–∞–≤–∂–¥–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ
        tasks[str(next_id)] = {
            "title": title,
            "chapter": ch,
            "role": first_role,
            "status": "–≤ —Ä–æ–±–æ—Ç—ñ"
        }
        next_id += 1

        # –Ø–∫—â–æ —Å—Ç–∞—Ä—Ç—É—î–º–æ –∑ –ü–µ—Ä–µ–∫–ª–∞–¥—É ‚Äî –æ–¥—Ä–∞–∑—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –¥–ª—è –ö–ª—ñ–Ω—É
        if first_role == "‚úçÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥":
            tasks[str(next_id)] = {
                "title": title,
                "chapter": ch,
                "role": "üßº –ö–ª—ñ–Ω",
                "status": "–≤ —Ä–æ–±–æ—Ç—ñ"
            }
            next_id += 1

    save_tasks(tasks)


# === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á ===
async def finish_task_creation(message, title, chapters):
    user_id = str(message.from_user.id)

    # üßπ –û—á–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω ‚Äî –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    if user_id in admin_states:
        admin_states.pop(user_id)

    # ‚öôÔ∏è –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –º–µ–Ω—é –¢—å–æ—Ç—ñ –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞
    admin_menu = build_admin_panel()
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è *{title}*, –≥–ª–∞–≤–∏ {', '.join(chapters)}.\n\n"
        f"–ú–æ–∂–µ—à –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é ‚¨ÖÔ∏è",
        parse_mode="Markdown",
        reply_markup=admin_menu
    )

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–ª—ñ ---
user_finish_state = {}

def build_back_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")]],
        resize_keyboard=True
    )

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def start_finish_process(message: Message):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –æ–±–∏—Ä–∞—î–º–æ —Ä–æ–ª—å."""
    user_id = str(message.from_user.id)
    users = load_users()
    user_roles = users.get(user_id, {}).get("roles", [])

    if not user_roles:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ üò¢")
        return

    buttons = [[KeyboardButton(text=r)] for r in user_roles]
    buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    user_finish_state[user_id] = {"step": "choose_role"}
    await message.answer("‚ú® –Ø–∫—É —Ä–æ–ª—å —Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞?", reply_markup=kb)


@dp.message(lambda m: str(m.from_user.id) in user_finish_state and user_finish_state[str(m.from_user.id)]["step"] == "choose_role")
async def choose_role_to_finish(message: Message):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±–∏—Ä–∞—î —Ä–æ–ª—å, —è–∫—É –∑–∞–≤–µ—Ä—à–∏–≤."""
    user_id = str(message.from_user.id)
    role = message.text.strip()

    if role == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        user_finish_state.pop(user_id, None)
        users = load_users()
        roles = users.get(user_id, {}).get("roles", [])
        menu = build_main_menu(roles)
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=menu)
        return

    users = load_users()
    if role not in users.get(user_id, {}).get("roles", []):
        await message.answer("‚ùå –¶–µ –Ω–µ —Ç–≤–æ—è —Ä–æ–ª—å. –û–±–µ—Ä–∏ —ñ–Ω—à—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —É –º–µ–Ω—é.")
        return

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–ª—å —É —Å—Ç–∞–Ω—ñ
    user_finish_state[user_id]["role"] = role
    user_finish_state[user_id]["step"] = "choose_title"

    tasks = load_tasks()
    active_titles = sorted({t["title"] for t in tasks.values() if t["status"] == "–≤ —Ä–æ–±–æ—Ç—ñ" and t["role"] == role})

    if not active_titles:
        kb = build_back_keyboard()
        await message.answer(f"üîπ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–æ–ª—ñ {role}.", reply_markup=kb)
        return

    buttons = [[KeyboardButton(text=title)] for title in active_titles]
    buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(f"üìö –û–±–µ—Ä–∏ —Ç–∞–π—Ç–ª, —è–∫–∏–π —Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –¥–ª—è —Ä–æ–ª—ñ {role}:", reply_markup=kb)


@dp.message(lambda m: str(m.from_user.id) in user_finish_state and user_finish_state[str(m.from_user.id)]["step"] == "choose_title")
async def choose_title_to_finish(message: Message):
    """–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ ‚Äî –æ–±–∏—Ä–∞—î–º–æ —Ç–∞–π—Ç–ª."""
    user_id = str(message.from_user.id)
    title = message.text.strip()

    if title == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é":
        user_finish_state.pop(user_id, None)
        users = load_users()
        roles = users.get(user_id, {}).get("roles", [])
        menu = build_main_menu(roles)
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=menu)
        return

    role = user_finish_state[user_id]["role"]
    tasks = load_tasks()
    available = [t for t in tasks.values() if t["title"] == title and t["status"] == "–≤ —Ä–æ–±–æ—Ç—ñ" and t["role"] == role]

    if not available:
        kb = build_back_keyboard()
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á —ñ–∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –¥–ª—è —Ü—ñ—î—ó —Ä–æ–ª—ñ.", reply_markup=kb)
        return

    user_finish_state[user_id]["title"] = title
    user_finish_state[user_id]["step"] = "choose_chapters"

    kb = build_back_keyboard()
    await message.answer(
        f"‚ú® –Ø–∫—ñ –≥–ª–∞–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥–ª—è —Ä–æ–ª—ñ {role}? (–Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –¥—ñ–∞–ø–∞–∑–æ–Ω: 01-05,07,09)",
        reply_markup=kb
    )
def create_next_stage(tasks, title, chapter, next_role):
    """–°—Ç–≤–æ—Ä—é—î –Ω–∞—Å—Ç—É–ø–Ω—É –∑–∞–¥–∞—á—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î."""
    exists = any(
        t["title"] == title and t["chapter"] == chapter and t["role"] == next_role
        for t in tasks.values()
    )
    if not exists:
        next_id = str(max([int(k) for k in tasks.keys()] + [0]) + 1)
        tasks[next_id] = {
            "title": title,
            "chapter": chapter,
            "role": next_role,
            "status": "–≤ —Ä–æ–±–æ—Ç—ñ"
        }

@dp.message(lambda m: str(m.from_user.id) in user_finish_state and user_finish_state[str(m.from_user.id)]["step"] == "choose_chapters")
async def choose_chapters_to_finish(message: Message):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –≥–ª–∞–≤."""
    user_id = str(message.from_user.id)
    title = user_finish_state[user_id]["title"]
    role = user_finish_state[user_id]["role"]

    raw_input = message.text.replace(" ", "")
    done_chapters = []
    for part in raw_input.split(","):
        if "-" in part:
            try:
                start, end = part.split("-")
                start_i = int(start)
                end_i = int(end)
                width = max(2, len(start))
                done_chapters.extend([str(i).zfill(width) for i in range(start_i, end_i + 1)])
            except ValueError:
                continue
        elif part:
            try:
                done_chapters.append(str(int(part)).zfill(2))
            except ValueError:
                continue

    # ‚¨áÔ∏è –¢–£–¢ –ù–ï –ü–û–í–ò–ù–ù–û –ë–£–¢–ò –í–Ü–î–°–¢–£–ü–£!
    tasks = load_tasks()
    count = 0
    done_list = []  # –ó–±–∏—Ä–∞—î–º–æ —Å—é–¥–∏ –≤—Å—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –≥–ª–∞–≤–∏

    for t in list(tasks.values()):
        if (
            t["title"] == title
            and t["chapter"] in done_chapters
            and t["status"] == "–≤ —Ä–æ–±–æ—Ç—ñ"
            and t["role"] == role
        ):
            t["status"] = "–≥–æ—Ç–æ–≤–æ"
            done_list.append(t["chapter"])


    # === –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –µ—Ç–∞–ø—ñ–≤ ===
    for chapter in done_list:
        # 1Ô∏è‚É£ –Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π –ü–µ—Ä–µ–∫–ª–∞–¥ ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –†–µ–¥
        if role == "‚úçÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥":
            create_next_stage(tasks, title, chapter, "üñã –†–µ–¥")

        # 2Ô∏è‚É£ –Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π –ö–ª—ñ–Ω ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –≥–æ—Ç–æ–≤–∏–π –†–µ–¥, —Ç–æ–¥—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –¢–∞–π–ø
        elif role == "üßº –ö–ª—ñ–Ω":
            red_done = any(
                tt["title"] == title and tt["chapter"] == chapter and tt["role"] == "üñã –†–µ–¥" and tt["status"] == "–≥–æ—Ç–æ–≤–æ"
                for tt in tasks.values()
            )
            if red_done:
                create_next_stage(tasks, title, chapter, "üß© –¢–∞–π–ø")

        # 3Ô∏è‚É£ –Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π –†–µ–¥ ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –≥–æ—Ç–æ–≤–∏–π –ö–ª—ñ–Ω, —Ç–æ–¥—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –¢–∞–π–ø
        elif role == "üñã –†–µ–¥":
            clean_done = any(
                tt["title"] == title and tt["chapter"] == chapter and tt["role"] == "üßº –ö–ª—ñ–Ω" and tt["status"] == "–≥–æ—Ç–æ–≤–æ"
                for tt in tasks.values()
            )
            if clean_done:
                create_next_stage(tasks, title, chapter, "üß© –¢–∞–π–ø")

        # 4Ô∏è‚É£ –Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π –¢–∞–π–ø ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –ë–µ—Ç—É
        elif role == "üß© –¢–∞–π–ø":
            create_next_stage(tasks, title, chapter, "üëÅ –ë–µ—Ç–∞")

        # 5Ô∏è‚É£ –ë–µ—Ç–∞ ‚Äî —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø, —Ñ—ñ–∫—Å—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        elif role == "üëÅ –ë–µ—Ç–∞":
            completed_file = "database/completed.json"

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥–∞–Ω—ñ
            if os.path.exists(completed_file):
                with open(completed_file, "r", encoding="utf-8") as f:
                    try:
                        completed = json.load(f)
                    except json.JSONDecodeError:
                        completed = {}
            else:
                completed = {}

            if title not in completed:
                completed[title] = []

            new_completed = []
            for ch in done_chapters:
                if ch not in completed[title]:
                    completed[title].append(ch)
                    new_completed.append(ch)

            with open(completed_file, "w", encoding="utf-8") as f:
                json.dump(completed, f, indent=2, ensure_ascii=False)

    save_tasks(tasks)
    user_finish_state.pop(user_id, None)

    users = load_users()
    roles = users.get(user_id, {}).get("roles", [])
    menu = build_main_menu(roles)

    if done_list:
        await message.answer(
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ({len(done_list)}) –¥–ª—è —Ä–æ–ª—ñ {role}: *{title}* ‚Äî –≥–ª–∞–≤–∏ {', '.join(done_list)}.\n"
            f"‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω—ñ –µ—Ç–∞–ø–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (—è–∫—â–æ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ).",
            parse_mode="Markdown",
            reply_markup=menu
        )
    else:
        await message.answer(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥—ñ–≤ –∞–±–æ —Ü—ñ –≥–ª–∞–≤–∏ –≤–∂–µ –±—É–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ.",
            reply_markup=menu
        )



# --- –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ù–∞–∑–∞–¥ —É –º–µ–Ω—é" ---
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")
async def back_to_menu_global(message: Message):
    user_id = str(message.from_user.id)

    # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω–∏, —è–∫—â–æ –±—É–ª–∏
    if user_id in admin_states:
        admin_states.pop(user_id, None)
    if 'user_finish_state' in globals() and user_id in user_finish_state:
        user_finish_state.pop(user_id, None)

    users = load_users()
    roles = users.get(user_id, {}).get("roles", [])
    menu = build_main_menu(roles)

    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=menu)


# --- –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π ---
@dp.message()
async def handle_roles(message: Message):
    users = load_users()
    user_id = str(message.from_user.id)
    text = message.text

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        roles = users.get(user_id, {}).get("roles", [])
        if not roles:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ä–æ–ª—å üòâ")
            return
        menu = build_main_menu(roles)
        await message.answer("–†–æ–ª—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ\n–û—Å—å —Ç–≤–æ—î –º–µ–Ω—é:", reply_markup=menu)
        return

    if text in ROLES:
        if user_id not in users:
            users[user_id] = {"roles": [], "tasks": []}
        if text not in users[user_id]["roles"]:
            users[user_id]["roles"].append(text)
            save_users(users)
            await message.answer(f"–î–æ–¥–∞–Ω–æ —Ä–æ–ª—å: {text} ‚úÖ")
        else:
            await message.answer(f"–¢–∏ –≤–∂–µ –º–∞—î—à —Ä–æ–ª—å {text} üòâ")
        return


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
